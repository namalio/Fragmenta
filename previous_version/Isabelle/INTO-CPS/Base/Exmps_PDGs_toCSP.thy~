(********  
  Title:      Theory defining pretty printing of CSP specs used to generate CSP
  Author:     Nuno Am√°lio
***********)

theory Exmps_PDGs_toCSP
imports "CSP_Print" Exmp_PDGs_Grs PDG_To_CSP PDG_To_Alloy

begin

definition CSP_output_dir:: "string"
where
  "CSP_output_dir = ''/Users/wv8599/Work/Fragmenta/Isabelle/INTO-CPS/CSP/''"

definition Alloy_output_dir:: "string"
where
  "Alloy_output_dir = ''/Users/wv8599/Work/Fragmenta/Isabelle/INTO-CPS/Alloy/''"

export_code toCSP CSP_ast.expid Alloy_ast.AExpid Alloy_ast.dset Alloy_ast.dc Alloy_ast.sig 
  Alloy_ast.fact Alloy_ast.psig Alloy_ast.amodule toAlloy csp str_int G1 G2 G3 G3b G4a G4b 
  CSP_output_dir Alloy_output_dir
  in SML module_name CSP_Alloy file "csp-alloy.sml"

ML_file "csp-alloy.sml"

ML_file "wr-csp.sml"

ML {*
open CSP_Alloy;

val ind_unit = "   ";
fun maybe_nl ind = (if ind="" then "\n" else "")

(*Code prints to enable the translation into CSPm*)
fun wrStrsWithSep_ [] sep = ""
  | wrStrsWithSep_ (s::ss) sep =
  (if null ss then s else s^sep^" "^wrStrsWithSep_ ss sep)

fun charsToStr [] = ""
  | charsToStr (c::cs) = (str c)^charsToStr cs

fun charslsToStrs [] = []
  | charslsToStrs (cs::lcs) = (charsToStr cs)::(charslsToStrs lcs)

fun wrAlloyIds [] = ""
  |  wrAlloyIds (id::ids) = (if null ids then id
    else id^", "^(wrAlloyIds ids))

fun wrSigTy (abstract) = "abstract"
  | wrSigTy (normal) = ""

fun wrMult (mlone) = "lone"
  | wrMult (mone) = "one"
  | wrMult (msome) = "some"

fun wrMultOption (None) = ""
  | wrMultOption (SOME m) = wrMult(m)

fun wrAExp (AExpid aid ) = charsToStr aid
  | wrAExp (AExpset e) = "set "^wrAExp (e)
  | wrAExp (AExpno e) = "no "^wrAExp (e)
  | wrAExp (AExpthis) = "this"
  | wrAExp (AExpnone) = "none"
  | wrAExp (AExpeq (e1, e2)) = wrAExp (e1)^" = "^wrAExp (e2)
  | wrAExp (AExpneq (e1, e2)) = wrAExp (e1)^" != "^wrAExp (e2)
  | wrAExp (AExpDot (e1, e2)) = wrAExp (e1)^"."^wrAExp (e2)
  | wrAExp (AExpPlus (e1, e2)) = wrAExp (e1)^" + "^wrAExp (e2)

fun wrDeclExp (Dset(m, e)) = (wrMultOption m)^" " ^(wrAExp e)

fun wrDecl (Dc (lids, de)) = (wrAlloyIds (charslsToStrs lids))^" : "^(wrDeclExp de)

fun wrDecls [] = ""
  | wrDecls (d::ds) = (wrDecl d)^"\n"^(wrDecls ds)

fun wrAExps [] = ""
  | wrAExps (e::es) = (wrAExp e)^"\n"^(wrAExps es)

fun wrSigCnts (es) = (if null es then "" else "{\n"^wrAExps(es)^"}")

fun wrSigDecl (Sig (sty, m, aids, ds, es)) = 
  wrSigTy (sty)^" "^wrMultOption(m)^" sig "^ wrAlloyIds (charslsToStrs aids)
  ^" {\n" ^(wrDecls ds)^"}"^(wrSigCnts es)

fun wrFactDecl (Fact (aid, es)) = 
  "fact "^charsToStr(aid)^"{\n"^wrAExps(es)^"}"

fun wrParagraph (Psig p) = wrSigDecl (p)
  | wrParagraph (Pfact p) = wrFactDecl (p)

fun wrParagraphs [] = ""
  | wrParagraphs (p::ps) = (wrParagraph p)^"\n\n"^(wrParagraphs ps)

fun wrAlloyModule (Amodule (aid, aps)) = 
  "module " ^charsToStr(aid)^"\n\n"^(wrParagraphs aps)

(*val dir1 = OS.FileSys.getDir();*)
val dir_csp = charsToStr(cSP_output_dir);
val dir_alloy = charsToStr(alloy_output_dir);
val file_csp = TextIO.openOut(dir_csp^"G1.csp");
  TextIO.output (file_csp, wrCSP_ (toCSP g1));
  TextIO.closeOut(file_csp);

val file_alloy = TextIO.openOut(dir_alloy^"G1.als");
  TextIO.output (file_alloy, wrAlloyModule (toAlloy g1));
  TextIO.closeOut(file_alloy);

val file_csp = TextIO.openOut(dir_csp^"G2.csp");
  TextIO.output (file_csp, wrCSP_ (toCSP g2));
  TextIO.closeOut(file_csp);

val file_alloy = TextIO.openOut(dir_alloy^"G2.als");
  TextIO.output (file_alloy, wrAlloyModule (toAlloy g2));
  TextIO.closeOut(file_alloy);

val file_csp = TextIO.openOut(dir_csp^"G3.csp");
  TextIO.output (file_csp, wrCSP_ (toCSP g3));
  TextIO.closeOut(file_csp );

val file_alloy = TextIO.openOut(dir_alloy^"G3.als");
  TextIO.output (file_alloy , wrAlloyModule (toAlloy g3));
  TextIO.closeOut(file_alloy );

val file_csp = TextIO.openOut(dir_csp^"G3b.csp");
  TextIO.output (file_csp, wrCSP_ (toCSP g3b));
  TextIO.closeOut(file_csp);

val file_alloy = TextIO.openOut(dir_alloy^"G3b.als");
  TextIO.output (file_alloy , wrAlloyModule (toAlloy g3b));
  TextIO.closeOut(file_alloy );

val file_csp = TextIO.openOut(dir_csp^"G4a.csp");
  TextIO.output (file_csp, wrCSP_ (toCSP g4a));
  TextIO.closeOut(file_csp);

val file_alloy = TextIO.openOut(dir_alloy^"G4a.als");
  TextIO.output (file_alloy , wrAlloyModule (toAlloy g4a));
  TextIO.closeOut(file_alloy );

val file_csp = TextIO.openOut(dir_csp^"G4b.csp");
  TextIO.output (file_csp, wrCSP_ (toCSP g4b));
  TextIO.closeOut(file_csp);

val file_alloy = TextIO.openOut(dir_alloy^"G4b.als");
  TextIO.output (file_alloy , wrAlloyModule (toAlloy g4b));
  TextIO.closeOut(file_alloy );
*}

end