
channel E_w_win1, E_wout1_win2, E_wout2_win3, E_v1_v2, E_v2_w, E_win1_wout1, E_win2_wout2, E_win3_wout3

edges = {E_w_win1, E_wout1_win2, E_wout2_win3, E_v1_v2, E_v2_w, E_win1_wout1, E_win2_wout2, E_win3_wout3}

Limited = 
   let
      Limited0(E, n) = 
         if n > 0
            then [] e : E @ e -> (Limited0(E, n-1) |~| SKIP)
            else STOP
   within
      Limited0(edges, 8)

PortDependancyGraph = 
   let
      P(1) = E_v1_v2 -> P(2)
      P(2) = E_v2_w -> P(3)
      P(3) = E_w_win1 -> P(4)
      P(4) = E_win1_wout1 -> P(5)
      P(5) = E_wout1_win2 -> P(6)
      P(6) = E_win2_wout2 -> P(7)
      P(7) = E_wout2_win3 -> P(8)
      P(8) = E_win3_wout3 -> SKIP
   within
      [] i : {1..8} @ P(i)

assert Limited [T= PortDependancyGraph