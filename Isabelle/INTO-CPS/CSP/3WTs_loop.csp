
channel E_w_win1, E_wout1_win2, E_wout2_win3, E_v1_v2, E_wout3_win, E_win_v1, E_v2_w, E_win1_wout1, E_win2_wout2, E_win3_wout3

edges = {E_w_win1, E_wout1_win2, E_wout2_win3, E_v1_v2, E_wout3_win, E_win_v1, E_v2_w, E_win1_wout1, E_win2_wout2, E_win3_wout3}

Limited = 
   let
      Limited0(E, n) = 
         if n > 0
            then [] e : E @ e -> (Limited0(E, n-1) |~| SKIP)
            else STOP
   within
      Limited0(edges, 10)

PortDependancyGraph = 
   let
      P(1) = E_w_win1 -> P(2)
      P(2) = E_win1_wout1 -> P(3)
      P(3) = E_wout1_win2 -> P(4)
      P(4) = E_win2_wout2 -> P(5)
      P(5) = E_wout2_win3 -> P(6)
      P(6) = E_win3_wout3 -> P(9)
      P(7) = E_v1_v2 -> P(8)
      P(8) = E_v2_w -> P(1)
      P(9) = E_wout3_win -> P(10)
      P(10) = E_win_v1 -> P(7)
      P(11) = E_win_v1 -> P(7)
      P(12) = E_v1_v2 -> P(8)
      P(13) = E_v2_w -> P(1)
      P(14) = E_w_win1 -> P(2)
      P(15) = E_win1_wout1 -> P(3)
      P(16) = E_wout1_win2 -> P(4)
      P(17) = E_win2_wout2 -> P(5)
      P(18) = E_wout2_win3 -> P(6)
      P(19) = E_win3_wout3 -> P(9)
      P(20) = E_wout3_win -> P(10)
   within
      [] i : {1..20} @ P(i)

assert Limited [T= PortDependancyGraph